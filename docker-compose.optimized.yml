services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: docharvester
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - docharvester-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - docharvester-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Ollama - OPTIMIZED FOR PERFORMANCE
  ollama:
    image: ollama/ollama:latest
    container_name: docharvester-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - docharvester-network
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=1        # Limit parallel requests to prevent overload
      - OLLAMA_MAX_LOADED_MODELS=1   # Only keep one model loaded
      - OLLAMA_FLASH_ATTENTION=true  # Enable flash attention for efficiency
    deploy:
      resources:
        limits:
          cpus: '8.0'    # Increased CPU allocation for Ollama
          memory: 12G    # Increased memory for better performance
        reservations:
          cpus: '4.0'
          memory: 6G
    command: serve
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    ports:
      - "8000:8000"
    env_file:
      - env.optimized  # Use optimized configuration
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/docharvester
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      # Override with optimized settings
      CURRENT_LLM_PROVIDER: LOCAL
      USE_LOCAL_LLM: true
      OLLAMA_BASE_URL: http://ollama:11434
      LOCAL_LLM_MODEL: gemma:2b
      # Performance optimizations
      WIKI_GENERATION_TIMEOUT: 120
      ENTITY_EXTRACTION_TIMEOUT: 90
      WORKER_TIMEOUT_SECONDS: 1800
      MAX_CONCURRENT_TASKS: 2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./coverage.yml:/app/coverage.yml
      - uploads_data:/app/uploads
    networks:
      - docharvester-network
    deploy:
      resources:
        limits:
          cpus: '3.0'    # Reduced to leave more for Ollama
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    command: celery -A backend.workers.celery_app worker --loglevel=info --concurrency=2 --max-tasks-per-child=100
    env_file:
      - env.optimized  # Use optimized configuration
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/docharvester
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      # Override with optimized settings
      CURRENT_LLM_PROVIDER: LOCAL
      USE_LOCAL_LLM: true
      OLLAMA_BASE_URL: http://ollama:11434
      LOCAL_LLM_MODEL: gemma:2b
      # Worker optimizations
      WORKER_BATCH_SIZE: 10
      MAX_CONCURRENT_TASKS: 2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./coverage.yml:/app/coverage.yml
      - uploads_data:/app/uploads
    networks:
      - docharvester-network
    deploy:
      resources:
        limits:
          cpus: '2.0'    # Reduced worker resources
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    command: celery -A backend.workers.celery_app beat --loglevel=info
    env_file:
      - env.optimized
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/docharvester
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./coverage.yml:/app/coverage.yml
    networks:
      - docharvester-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    networks:
      - docharvester-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Neo4j - OPTIMIZED FOR KNOWLEDGE GRAPHS
  neo4j:
    image: neo4j:5-community
    container_name: docharvester-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/docharvester123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      # Optimized memory settings (Neo4j 5 format)
      - NEO4J_server_memory_heap_initial__size=1G
      - NEO4J_server_memory_heap_max__size=3G
      - NEO4J_server_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - docharvester-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "docharvester123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 5G    # Increased for better knowledge graph performance
        reservations:
          cpus: '0.5'
          memory: 2G

  # Graphiti Service - OPTIMIZED
  graphiti:
    build:
      context: ./graphiti
      dockerfile: Dockerfile
    container_name: docharvester-graphiti
    depends_on:
      neo4j:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=docharvester123
      - OLLAMA_BASE_URL=http://ollama:11434
      - USE_LOCAL_LLM=true
      - LOCAL_LLM_MODEL=gemma:2b
      # Performance settings
      - GRAPHITI_BATCH_SIZE=10
      - GRAPHITI_TIMEOUT=90
      - GRAPHITI_MAX_ENTITIES_PER_REQUEST=20
    ports:
      - "8001:8000"
    volumes:
      - ./graphiti/config:/app/config
    networks:
      - docharvester-network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  neo4j_data:
  neo4j_logs:
  ollama_data:

networks:
  docharvester-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500 